diff --git a/dynamic_env/main.py b/dynamic_env/main.py
index 4e0a871..cb7cd51 100644
--- a/dynamic_env/main.py
+++ b/dynamic_env/main.py
@@ -142,12 +142,11 @@ class DQL:
             reward = reward.to(device = device)
             next_state = next_state.to(device = device)
             done = done.to(device = device)
-            
+            diff = state - next_state
+            done_local = (diff != 0).any(dim=1).float().to(device)
 
             Q_next = self.target_network(next_state).detach()
-            target_Q = reward.cpu().squeeze() + self.gamma * Q_next.cpu().max(1)[0].view(batch_size, 1).squeeze() * (
-                1 - np.array([state[e].cpu().mean() == next_state[e].cpu().mean() for e in range(len(next_state))])
-            ) 
+            target_Q = reward.squeeze() + self.gamma * Q_next.max(1)[0].view(batch_size, 1).squeeze() * done_local
             
             # Forward 
             # Loss calculation based on loss function
diff --git a/dynamic_env/run.py b/dynamic_env/run.py
index 1fa7855..e8a533d 100644
--- a/dynamic_env/run.py
+++ b/dynamic_env/run.py
@@ -6,4 +6,4 @@ for i in range(1, 5):
     print('####  Running the code for Level:', i, "info exchange  ####")
     print('#######################################################')
     p = subprocess.run(["python", "uav_env.py"])
-    g = subprocess.run(["python", "main.py", "--info-exchange-lvl", str(i)])
\ No newline at end of file
+    g = subprocess.run(["python", "main.py", "--info-exchange-lvl", str(i), "--wandb-track", "True"])
\ No newline at end of file
diff --git a/main.py b/main.py
index 23221d2..1179f38 100644
--- a/main.py
+++ b/main.py
@@ -32,7 +32,7 @@ def parse_args():
     # Arguments for the experiments name / run / setup and Weights and Biases
     parser.add_argument("--exp-name", type=str, default="madql_uav", help="name of this experiment")
     parser.add_argument("--seed", type=int, default=1, help="seed of experiment to ensure reproducibility")
-    parser.add_argument("--torch-determinsitc", type= lambda x:bool(strtobool(x)), default=True, nargs="?", const=True, help="if toggeled, 'torch-backends.cudnn.deterministic=False'")
+    parser.add_argument("--torch-deterministic", type= lambda x:bool(strtobool(x)), default=True, nargs="?", const=True, help="if toggeled, 'torch-backends.cudnn.deterministic=False'")
     parser.add_argument("--cuda", type=lambda x: bool(strtobool(x)), default=True, nargs="?", const=True, help="if toggled, cuda will be enabled by default")
     parser.add_argument("--wandb-track", type=lambda x: bool(strtobool(x)), default=False, help="if toggled, this experiment will be tracked with Weights and Biases project")
     parser.add_argument("--wandb-name", type=str, default="UAV_Subband_Allocation_DQN_Pytorch", help="project name in Weight and Biases")
@@ -142,13 +142,12 @@ class DQL:
             reward = reward.to(device = device)
             next_state = next_state.to(device = device)
             done = done.to(device = device)
-            
+            diff = state - next_state
+            done_local = (diff != 0).any(dim=1).float().to(device)
 
             Q_next = self.target_network(next_state).detach()
-            target_Q = reward.cpu().squeeze() + self.gamma * Q_next.cpu().max(1)[0].view(batch_size, 1).squeeze() * (
-                1 - np.array([state[e].cpu().mean() == next_state[e].cpu().mean() for e in range(len(next_state))])
-            ) 
-            
+            target_Q = reward.squeeze() + self.gamma * Q_next.max(1)[0].view(batch_size, 1).squeeze() * done_local
+
             # Forward 
             # Loss calculation based on loss function
             target_Q = target_Q.float()
@@ -188,7 +187,7 @@ if __name__ == "__main__":
     random.seed(args.seed)
     np.random.seed(args.seed)
     torch.manual_seed(args.seed)
-    torch.use_deterministic_algorithms = args.torch_determinsitc
+    torch.use_deterministic_algorithms = args.torch_deterministic
 
     # If wandb tack is set to True // Track the training process, hyperparamters and results
     if args.wandb_track:
@@ -365,9 +364,12 @@ if __name__ == "__main__":
             ####   Tensorboard logs  ####
             #############################
             # writer.add_figure("images/uav_users", figure, i_episode)
+            writer.add_scalar("chart/connected_users", sum(temp_data[4]))
 
             print(drone_act_list)
             print("Number of user connected in ",i_episode," episode is: ", temp_data[4])
+            print("Total user connected in ",i_episode," episode is: ", sum(temp_data[4]))
+
 
     def smooth(y, pts):
         box = np.ones(pts)/pts
