0
[1, 4, 4, 4, 1]
Number of user connected before change in  0  episode is:  [1 0 0 2 5]
Total user connected before change in  0  episode is:  8
Number of user connected after change in  0  episode is:  [0 0 0 2 1]
Total user connected after change in  0  episode is:  3
1
2
3
4
5
C:\Users\tripats\.conda\envs\uavenv\lib\site-packages\numpy\core\shape_base.py:121: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  ary = asanyarray(ary)
Traceback (most recent call last):
  File "C:\Users\tripats\Documents\GitHub\UAV_Subband_Allocation_DQN_Pytorch\dynamic_env\main.py", line 317, in <module>
    UAV_OB[k].train(batch_size, dnn_epoch)
  File "C:\Users\tripats\Documents\GitHub\UAV_Subband_Allocation_DQN_Pytorch\dynamic_env\main.py", line 158, in train
    loss.backward()
  File "C:\Users\tripats\.conda\envs\uavenv\lib\site-packages\torch\_tensor.py", line 396, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph, inputs=inputs)
  File "C:\Users\tripats\.conda\envs\uavenv\lib\site-packages\torch\autograd\__init__.py", line 173, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
RuntimeError: element 0 of tensors does not require grad and does not have a grad_fn